import Text from '@/common/components/atom/text';
import { useSuggestionItem } from '@/modules/search/hooks/useSuggestionItemClick';
import { Item } from '@/modules/search/types/suggestion';
import clsx from 'clsx';
import style from './section.module.css';

interface TextSectionProps {
  items: Item[];
}

export const TextSection = (props: TextSectionProps) => {
  const { items } = props;
  const { handleItemClick } = useSuggestionItem();

  const Icon = ({ type }: { type: 'most_common' | 'illness' }) => {
    const textIcons = {
      most_common: (
        <svg width="16" height="14" viewBox="0 0 16 14" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path
            d="M0.130997 7.01716C0.00451714 7.20464 -0.0303739 7.3704 0.026324 7.51444C0.0830218 7.65852 0.229128 7.73057 0.464642 7.73057H1.36745C1.45904 8.60398 1.69346 9.42024 2.07072 10.1794C2.44798 10.9385 2.93754 11.6038 3.53942 12.1754C4.14128 12.7471 4.82166 13.1929 5.58054 13.513C6.3394 13.8331 7.14626 13.9932 8.00111 13.9932C8.99985 13.9932 9.93428 13.7725 10.8044 13.3312C11.6745 12.8899 12.417 12.2989 13.032 11.5581C13.1541 11.4118 13.2086 11.2563 13.1955 11.0916C13.1824 10.927 13.1126 10.7967 12.9862 10.7007C12.8597 10.6046 12.7245 10.5703 12.5805 10.5978C12.4366 10.6252 12.3123 10.7029 12.2077 10.831C11.7017 11.4437 11.0857 11.9296 10.3595 12.2886C9.63333 12.6476 8.8472 12.8271 8.00111 12.8271C7.2902 12.8271 6.61964 12.699 5.98941 12.4429C5.3592 12.1869 4.79767 11.8268 4.30483 11.3626C3.812 10.8984 3.40748 10.3577 3.09128 9.74035C2.77508 9.12299 2.57555 8.45306 2.49269 7.73057H3.46745C3.6986 7.73057 3.84362 7.65967 3.9025 7.51788C3.96137 7.37614 3.92757 7.21152 3.80109 7.02402L2.33567 4.83588C2.231 4.68039 2.10888 4.60151 1.96932 4.59922C1.82976 4.59694 1.70546 4.67582 1.59642 4.83588L0.130997 7.01716ZM2.97679 2.43509C2.85032 2.58142 2.79362 2.73576 2.8067 2.8981C2.81979 3.06044 2.89175 3.18962 3.02259 3.28565C3.14907 3.38168 3.28427 3.41712 3.4282 3.39197C3.57212 3.36682 3.69642 3.29022 3.80109 3.16218C4.31138 2.54941 4.9296 2.06354 5.65577 1.70456C6.38194 1.34559 7.16372 1.1661 8.00111 1.1661C8.71201 1.1661 9.38257 1.29528 10.0128 1.55365C10.643 1.81202 11.2046 2.17328 11.6974 2.63744C12.1902 3.10159 12.5936 3.64234 12.9076 4.25968C13.2216 4.87703 13.4223 5.54696 13.5095 6.26949H12.5348C12.3036 6.26949 12.1586 6.34037 12.0997 6.48213C12.0408 6.62389 12.0746 6.78852 12.2011 6.97601L13.6665 9.16417C13.7712 9.31964 13.8933 9.39852 14.0329 9.40081C14.1724 9.4031 14.2967 9.32422 14.4058 9.16417L15.8647 6.98287C15.9955 6.7908 16.0315 6.62389 15.9726 6.48213C15.9137 6.34037 15.7665 6.26949 15.531 6.26949H14.6347C14.5432 5.39606 14.3088 4.57979 13.9315 3.82068C13.5542 3.06158 13.0646 2.39622 12.4628 1.8246C11.8609 1.25298 11.1795 0.805978 10.4184 0.483588C9.65734 0.161196 8.85157 0 8.00111 0C7.00671 0 6.07446 0.220644 5.20437 0.661932C4.33428 1.10322 3.59175 1.69427 2.97679 2.43509Z"
            fill="#505971"
            fillOpacity="0.6"
          />
        </svg>
      ),
      illness: (
        <svg width="17" height="11" viewBox="0 0 17 11" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path
            fillRule="evenodd"
            clipRule="evenodd"
            d="M16.25 0.629992C16.2513 0.468381 16.1903 0.306367 16.0669 0.183058C15.9436 0.0597575 15.7816 -0.00125537 15.62 1.95723e-05C15.6184 6.5321e-06 15.6167 0 15.615 0H11.625C11.2798 0 11 0.279822 11 0.625C11 0.970178 11.2798 1.25 11.625 1.25H14.1161L9.125 6.24112L6.9205 4.03661C6.48115 3.59727 5.76884 3.59727 5.3295 4.03661L0.183058 9.18306C-0.0610194 9.42714 -0.0610194 9.82286 0.183058 10.0669C0.427136 10.311 0.822864 10.311 1.06694 10.0669L6.125 5.00888L8.3295 7.21339C8.76884 7.65273 9.48116 7.65273 9.9205 7.21339L15 2.13388V4.625C15 4.97018 15.2798 5.25 15.625 5.25C15.9702 5.25 16.25 4.97018 16.25 4.625V0.635C16.25 0.633329 16.25 0.63166 16.25 0.629992Z"
            fill="#969BAA"
          />
        </svg>
      ),
    };
    return textIcons[type];
  };

  return (
    <div className="p-3 py-2 space-y-2 bg-white">
      {items?.map((item, index) => (
        <div
          key={item.position}
          className={clsx('flex p-1 cursor-pointer space-s-2 items-center', style.wrapper)}
          onClick={() => handleItemClick(item, index)}
        >
          {item.type && <Icon type={item.type} />}
          <Text fontSize="sm" className={style.title} dangerouslySetInnerHTML={{ __html: item.formatted_title ?? '' }} />
        </div>
      ))}
    </div>
  );
};

export default TextSection;
